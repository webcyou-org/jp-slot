{"version":3,"file":"jp-slot.umd.js","sources":["../src/utils/const.ts","../src/utils/weightedRandom.ts","../src/api/index.ts"],"sourcesContent":["export const BEING_ELECTED_LIST: string[] = [\n    'BIG当選',\n    'REG当選',\n    'BIG＋スイカ当選',\n    'REG＋スイカ当選',\n    'BIG＋チェリー当選',\n    'REG＋チェリー当選',\n    'スイカ当選',\n    'チェリー当選',\n    'ベル当選',\n    'リプレイ当選',\n    '当選無し'\n];\n\nexport const BEING_ELECTED_WEIGHT_LIST: number[] = [5, 4, 50, 40, 170, 150, 1220, 610, 7710, 8978, 46599];\n","/* eslint-disable consistent-return */\nexport function weightedRandom(items: any[], weights: number[]): {item: any, index: number} {\n    if (items.length !== weights.length) {\n      throw new Error('Items and weights must be of the same size');\n    }\n\n    if (!items.length) {\n      throw new Error('Items must not be empty');\n    }\n\n    // Preparing the cumulative weights array.\n    // For example:\n    // - weights = [1, 4, 3]\n    // - cumulativeWeights = [1, 5, 8]\n    const cumulativeWeights: number[] = [];\n    for (let i = 0; i < weights.length; i += 1) {\n      cumulativeWeights[i] = weights[i] + (cumulativeWeights[i - 1] || 0);\n    }\n\n    // Getting the random number in a range of [0...sum(weights)]\n    // For example:\n    // - weights = [1, 4, 3]\n    // - maxCumulativeWeight = 8\n    // - range for the random number is [0...8]\n    const maxCumulativeWeight = cumulativeWeights[cumulativeWeights.length - 1];\n    const randomNumber = maxCumulativeWeight * Math.random();\n\n    // Picking the random item based on its weight.\n    // The items with higher weight will be picked more often.\n    for (let itemIndex = 0; itemIndex < items.length; itemIndex += 1) {\n      if (cumulativeWeights[itemIndex] >= randomNumber) {\n        return {\n          item: items[itemIndex],\n          index: itemIndex,\n        };\n      }\n    }\n}\n\n","import { BEING_ELECTED_LIST, BEING_ELECTED_WEIGHT_LIST, weightedRandom } from '../utils'\n\nexport function drawing() {\n    return weightedRandom(BEING_ELECTED_LIST, BEING_ELECTED_WEIGHT_LIST);\n}\n"],"names":[],"mappings":";;;;;;IAAO,MAAM,kBAAkB,GAAa;QACxC,OAAO;QACP,OAAO;QACP,WAAW;QACX,WAAW;QACX,YAAY;QACZ,YAAY;QACZ,OAAO;QACP,QAAQ;QACR,MAAM;QACN,QAAQ;QACR,MAAM;KACT,CAAC;IAEK,MAAM,yBAAyB,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;;ICdzG;IACgB,SAAA,cAAc,CAAC,KAAY,EAAE,OAAiB,EAAA;IAC1D,IAAA,IAAI,KAAK,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;IACnC,QAAA,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAC/D,KAAA;IAED,IAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IACjB,QAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC5C,KAAA;;;;;QAMD,MAAM,iBAAiB,GAAa,EAAE,CAAC;IACvC,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC1C,QAAA,iBAAiB,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,KAAA;;;;;;QAOD,MAAM,mBAAmB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5E,MAAM,YAAY,GAAG,mBAAmB,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;;;IAIzD,IAAA,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI,CAAC,EAAE;IAChE,QAAA,IAAI,iBAAiB,CAAC,SAAS,CAAC,IAAI,YAAY,EAAE;gBAChD,OAAO;IACL,gBAAA,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC;IACtB,gBAAA,KAAK,EAAE,SAAS;iBACjB,CAAC;IACH,SAAA;IACF,KAAA;IACL;;aCnCgB,OAAO,GAAA;IACnB,IAAA,OAAO,cAAc,CAAC,kBAAkB,EAAE,yBAAyB,CAAC,CAAC;IACzE;;;;;;;;;;"}